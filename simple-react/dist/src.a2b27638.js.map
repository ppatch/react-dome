{"version":3,"sources":["src/index.js"],"names":["setAttribute","dom","name","value","test","toLowerCase","style","cssText","removeAttribute","createElement","tag","attrs","children","render","vnode","container","textNode","document","createTextNode","appendChild","Object","keys","forEach","key","child","React","ReactDOM","innerHTML","handleOnClick","element","getElementById"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["\n/**\n设置属性需要考虑一些特殊情况，我们单独将其拿出来作为一个方法setAttribute\n */\nfunction setAttribute(dom, name, value) {\n  // 如果属性名是classname,则改回class\n  if (name === 'className') name = 'class';\n\n  // 如果属性名是onXXX,则是一个事件监听方法\n  if (/on\\w+/.test(name)) {\n    name = name.toLowerCase();\n    dom[name] = value || ''\n    // 如果属性名是style,则更新style对象\n  } else if (name === 'style') {\n    if (!value || typeof value === 'string') {\n      dom.style.cssText = value || ''\n    } else if (value && typeof value === 'object') {\n      for(let name in value) {\n        dom.style[name] = typeof value[name] === 'number' ? value[name] + 'px' : value[name];\n      }\n    }\n  } else {\n    if (name in dom) {\n      dom[name] = value || ''\n    }\n    if (value) {\n      dom.setAttribute(name, value)\n    } else {\n      dom.removeAttribute(name)\n    }\n  }\n  // 普通属性则直接更新属性\n}\n/**\n  从jsx转译结果来看，createElement方法的参数是这样：\n\n  createElement( tag, attrs, child1, child2, child3 );\n  第一个参数是DOM节点的标签名，它的值可能是div，h1，span等等\n  第二个参数是一个对象，里面包含了所有的属性，可能包含了className，id等等\n  从第三个参数开始，就是它的子节点\n\n  我们对createElement的实现非常简单，只需要返回一个对象来保存它的信息就行了。\n */\nfunction createElement(tag, attrs, ...children) {\n  return {\n    tag,\n    attrs,\n    children\n  }\n}\n\n/**\n  所以render的第一个参数实际上接受的是createElement返回的对象，也就是虚拟DOM\n  而第二个参数则是挂载的目标DOM\n\n  总而言之，render方法的作用就是将虚拟DOM渲染成真实的DOM，下面是它的实现： \n*/\nfunction render ( vnode, container) {\n  if (typeof vnode === 'string') {\n    const textNode = document.createTextNode(vnode);\n    return container.appendChild(textNode)\n  }\n\n  const dom = document.createElement(vnode.tag);\n\n  if(vnode.attrs) {\n    Object.keys(vnode.attrs).forEach( key => {\n      const value = vnode.attrs[key]\n      setAttribute(dom, key, value); // 设置属性\n    })\n  }\n\n  vnode.children.forEach(child => render(child, dom))\n\n  return container.appendChild(dom)\n}\n\nconst React = {\n  createElement\n}\nconst ReactDOM = {\n  render: (vnode, container) => {\n    container.innerHTML = ''\n    return render(vnode, container)\n  }\n}\nfunction handleOnClick() {}\n\nconst element = (\n  <div>\n    hello <span className='first-class-name  aaa' style={{'font-size': '30px'}}>world</span> patch\n  </div>\n)\n\nReactDOM.render(element, document.getElementById('root'))"]}